initSidebarItems({"enum":[["TxEventQuery","Represents a query for an event pertaining to the specified transaction"]],"fn":[["compute_tally",""],["dry_run_tx","Dry run a transaction"],["get_all_validators",""],["get_bond_amount_at",""],["get_delegators_delegation",""],["get_proposal_offline_votes",""],["get_proposal_votes",""],["get_public_key","Get accountâ€™s public key stored in its storage sub-space"],["get_token_balance","Query token amount of owner."],["get_total_staked_tokes",""],["is_delegator","Check if a given address is a known delegator"],["is_delegator_at",""],["is_validator","Check if the given address is a known validator."],["known_address","Check if the address exists on chain. Established address exists if it has a stored validity predicate. Implicit and internal addresses always return true."],["query_balance","Query token balance(s)"],["query_bonds","Query PoS bond(s)"],["query_epoch","Query the epoch of the last committed block"],["query_has_storage_key","Query to check if the given storage key exists."],["query_proposal","Query Proposals"],["query_proposal_result",""],["query_protocol_parameters",""],["query_raw_bytes","Query the raw bytes of given storage key"],["query_result","Lookup the results of applying the specified transaction to the blockchain."],["query_slashes","Query PoS slashes"],["query_storage_prefix","Query a range of storage values with a matching prefix and decode them with [`BorshDeserialize`]. Returns an iterator of the storage keys paired with their associated values."],["query_storage_value","Query a storage value and decode it with [`BorshDeserialize`]."],["query_tx_response","Lookup the full response accompanying the specified transaction event"],["query_voting_power","Query PoS voting power"]]});